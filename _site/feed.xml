<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-04-01T18:04:24-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Beatriz Uezu Page</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">Funções de Escopo do Kotlin</title><link href="http://localhost:4000/funcoes-escopo-kotlin/" rel="alternate" type="text/html" title="Funções de Escopo do Kotlin" /><published>2021-04-01T00:00:00-03:00</published><updated>2021-04-01T00:00:00-03:00</updated><id>http://localhost:4000/funcoes-escopo-kotlin</id><content type="html" xml:base="http://localhost:4000/funcoes-escopo-kotlin/">&lt;p&gt;Recentemente comecei a trabalhar em um projeto em Kotlin, e no trabalho tenho a oportunidade de aprender e a compartilhar conhecimento com meu time. Esse foi o primeiro assunto que escolhi compartilhar com eles :)&lt;/p&gt;

&lt;p&gt;Esse post é o compilado do que li e entendi &lt;del&gt;ou não&lt;/del&gt; sobre o assunto.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;o-que-são-funções-de-escopo-scope-functions&quot;&gt;O que são Funções de Escopo (Scope Functions)?&lt;/h2&gt;

&lt;p&gt;São funções da biblioteca padrão do Kotlin cujo o objetivo é executar um bloco de código dentro de um escopo/contexto de um objeto que podem ou não ter um valor de retorno. São cinco funções: &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; ,  &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;also&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para começar vamos utilizar a classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt; como exemplo:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Smarthphone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Quando queremos mudar os atributo de &lt;code class=&quot;highlighter-rouge&quot;&gt;product&lt;/code&gt; fazemos isso:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deativate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Com as funções de escopo também é possível mudar os atributos e deixar o código mais com o estilo do Kotlin.&lt;/p&gt;

&lt;h2 id=&quot;let&quot;&gt;Let&lt;/h2&gt;

&lt;p&gt;Podemos utilizar o &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; para alterar os atributos de &lt;code class=&quot;highlighter-rouge&quot;&gt;product&lt;/code&gt; e usamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; para referenciar o &lt;code class=&quot;highlighter-rouge&quot;&gt;product&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;É possível trocar o &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; para qualquer outra variável para referenciar o product:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;att&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;att&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;att&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;att&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;      
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Product(title=Smarthpone Bonitono, price=1000.0, isActive=false)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Logo, os atributos de &lt;code class=&quot;highlighter-rouge&quot;&gt;product&lt;/code&gt; foram modificados com &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora vamos entender o valor de retorno do &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  kotlin.Unit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ao imprimir a variável &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; o retorno é um &lt;code class=&quot;highlighter-rouge&quot;&gt;[kotlin.Unit&lt;/code&gt;,](https://kotlinlang.org/docs/functions.html#unit-returning-functions) significa que o retorno é um valor não útil. Portanto, concluímos que o &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; não retorna um valor.&lt;/p&gt;

&lt;p&gt;Podemos utilizar o &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; quando invocamos uma ou mais funções em resultados de chamadas encadeadas:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;four&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;five&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Se dentro do bloco de código do &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; tiver apenas uma função com o argumento &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;, podemos escrever o escopo da função &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; como:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run&quot;&gt;Run&lt;/h2&gt;

&lt;p&gt;Também é possível utilizar o &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; para mudar os atributos de &lt;code class=&quot;highlighter-rouge&quot;&gt;product&lt;/code&gt; e utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; para referenciar o escopo do objeto:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Smarthphone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700.00&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O uso do &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; é opcional, e também deixa o código redundante, portanto podemos escrever dessa forma:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700.00&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vamos entender o retorno do &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700.00&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//kotlin.Unit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ao imprimir a variável &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; o retorno é um &lt;code class=&quot;highlighter-rouge&quot;&gt;[kotlin.Unit&lt;/code&gt;,](https://kotlinlang.org/docs/functions.html#unit-returning-functions) significa que o retorno é um valor não útil. Portanto, concluímos que o &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; não retorna um valor.&lt;/p&gt;

&lt;p&gt;Podemos utilizar o &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; para executar operações sobre um objeto e obter um resultado dentro de um escopo.&lt;/p&gt;

&lt;h2 id=&quot;with&quot;&gt;With&lt;/h2&gt;

&lt;p&gt;Utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; para executar funções no objeto dentro de um contexto. Podemos ler como “&lt;em&gt;com esse objeto, faça&lt;/em&gt;”&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Smarthphone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;produto desativado&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// produto desativado
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O valor de retorno do &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; é um &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin.Unit&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;produto desativado&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// produto desativado
// kotlin.Unit
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;apply&quot;&gt;Apply&lt;/h2&gt;

&lt;p&gt;Podemos utilizar o &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; para alterar os atributos de &lt;code class=&quot;highlighter-rouge&quot;&gt;product&lt;/code&gt;, utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; para referenciar o escopo do objeto. Podemos ler “&lt;em&gt;aplique as seguintes atribuições ao objeto&lt;/em&gt;”&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Smarthphone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O uso do &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; é opcional e também deixa o código redundante, portanto podemos escrever dessa forma:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O valor de retorno do &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; é o próprio objeto, podemos imprimir a variável &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; para entender isso:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Product(title=Smarthpone Bonitono, price=1000.0, isActive=true)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;also&quot;&gt;Also&lt;/h2&gt;

&lt;p&gt;Usamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;also&lt;/code&gt; para ações que utilizam o objeto do contexto como argumento ou quando precisamos de uma referência ao invés das propriedades e funções. Podemos ler como: “&lt;em&gt;e também faça com o objeto”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para referenciar o objeto dentro do escopo utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Smarthphone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Smarthpone Bonitono&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700.00&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;also&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Promoção do Produto $it&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Promoção do Produto Product(title=Smarthpone Bonitono, price=700.0, isActive=false)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;objeto-nulos&quot;&gt;Objeto nulos&lt;/h2&gt;

&lt;p&gt;Quando tivermos um objeto que possa ser nulo, as funções de escopo garantem que a função será chamada apenas se o objeto for não nulo:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;product2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// O ? permite que a variável seja nula
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;product2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tv&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100.00&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  null
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;resumo&quot;&gt;Resumo&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Função&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Retorno&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Variável dentro do escopo&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Uso&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Let&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unit/Lambda*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Funções com chamadas encadeadas e checagem de objetos nulos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Run&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unit/Lambda*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Inicialização do objeto e o cálculo do valor de retorno&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;With&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unit/Lambda*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Executar funções no objeto dentro de um contexto.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apply&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Objeto&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Inicializar e configurar um objeto&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Also&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Objeto&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ações adicionais que não alteram o objeto&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;* Na &lt;a href=&quot;https://kotlinlang.org/docs/scope-functions.html#return-value&quot;&gt;própria documentação do Kotlin&lt;/a&gt; diz que retorna o resultado lambda&lt;/p&gt;

&lt;h2 id=&quot;link-útil&quot;&gt;Link útil&lt;/h2&gt;
&lt;p&gt;Você pode testar o código usando o &lt;a href=&quot;https://play.kotlinlang.org/&quot;&gt;Kotlin Playground&lt;/a&gt;, divirta-se :)&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Youtube Playlist - &lt;a href=&quot;https://www.youtube.com/watch?v=i-bWvj10k0k&amp;amp;list=PLMZ2RODGNLRK1D9kOfHLIvnhsdB8C7E4k&quot;&gt;Kotlin Scope Functions Explained&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Documentação Kotlin - &lt;a href=&quot;https://kotlinlang.org/docs/scope-functions.html&quot;&gt;Scope Functions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Documentação Kotlin - &lt;a href=&quot;https://kotlinlang.org/docs/functions.html#unit-returning-functions&quot;&gt;Unit&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Artigo Medium - &lt;a href=&quot;https://medium.com/@fatihcoskun/kotlin-scoping-functions-apply-vs-with-let-also-run-816e4efb75f5&quot;&gt;Kotlin Scoping Functions apply vs. with, let, also, and run&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Artigo Medium - &lt;a href=&quot;https://medium.com/luizalabs/kotlin-let-run-with-also-ou-apply-24e8745f12fd&quot;&gt;Kotlin: let, run, with, also ou apply?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Artigo Medium - &lt;a href=&quot;https://proandroiddev.com/kotlin-scope-functions-made-simple-c59b97a04ca2&quot;&gt;Kotlin Scope Functions Made Simple&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Espero que você tenha entendido sobre as funções de escopo do Kotlin!&lt;/p&gt;

&lt;p&gt;Obrigada por ter lido &amp;lt;3&lt;/p&gt;

&lt;hr /&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="funções de escopo" /><category term="kotlin" /><summary type="html">Recentemente comecei a trabalhar em um projeto em Kotlin, e no trabalho tenho a oportunidade de aprender e a compartilhar conhecimento com meu time. Esse foi o primeiro assunto que escolhi compartilhar com eles :)</summary></entry><entry><title type="html">Referência de objetos</title><link href="http://localhost:4000/referencia-objetos/" rel="alternate" type="text/html" title="Referência de objetos" /><published>2019-11-23T00:00:00-03:00</published><updated>2019-11-23T00:00:00-03:00</updated><id>http://localhost:4000/referencia-objetos</id><content type="html" xml:base="http://localhost:4000/referencia-objetos/">&lt;p&gt;Já aconteceu de você ter duas variáveis com os mesmos valores e alterar uma variável a outra também é alterada?&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;o-que-é-variável-em-programação&quot;&gt;O que é variável em programação?&lt;/h1&gt;

&lt;p&gt;Variável é uma informação que será armazenada em um endereço da memória do computador, para ficar mais fácil identificar esse endereço atribuimos um nome para esse valor.&lt;/p&gt;

&lt;h1 id=&quot;caixas-e-post-its&quot;&gt;Caixas e post-its?&lt;/h1&gt;
&lt;p&gt;Para melhor entendimento podemos usar a metáfora da caixa e do post-its. Em algumas linguagens a variável representa uma caixa que vai armazenar um determinado valor, ou seja, cada caixa representado por uma variável terá um endereço na memória.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/box-autora.png&quot; alt=&quot;variável autora representado pela caixa com valor beatriz&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;variável autora representado pela caixa com valor beatriz&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/box-nome.png&quot; alt=&quot;variável nome representado pela caixa com valor beatriz&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;variável nome representado pela caixa com valor beatriz&lt;/figcaption&gt;

&lt;p&gt;Em Python, essa metáfora não é válida. Podemos dizer que as variáveis são como post-its, as variáveis quando tiverem o mesmo valor terão a mesma referência.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/postits.png&quot; alt=&quot;Valor beatriz com as variáveis nome e autora representados pelo post-its&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Valor beatriz com as variáveis nome e autora representados pelo post-its&lt;/figcaption&gt;

&lt;p&gt;Isso pode ser observado nesse código:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;nome = &amp;#39;beatriz&amp;#39;
autora = &amp;#39;beatriz&amp;#39;


id(nome)
#4542762672

id(autora)
#4542762672

id(&amp;#39;beatriz&amp;#39;)
#4542762672&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/d840aa64b4a2f7f2f47bf42395c6fd2f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;A função &lt;a href=&quot;https://docs.python.org/pt-br/3/library/functions.html#id&quot;&gt;id()&lt;/a&gt; retorna o endereço da memória que está armazenado aquele determinado valor.&lt;/p&gt;

&lt;h1 id=&quot;listas-tuplas-dicionários-e-conjuntos-armazenam-referências&quot;&gt;listas, tuplas, dicionários e conjuntos armazenam referências&lt;/h1&gt;
&lt;p&gt;Ao declarar listas, tuplas ou dicionários com os mesmos valores, os objetos não terão o mesmo id, ou seja a mesma referência, porém se os valores forem iguais “apontarão” para o mesmo id.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lista.jpg&quot; alt=&quot;Desenho ilustrativo das variaveis lista_1 e lista_2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Variávies lista_1 e lista_2 possuem os mesmos valores&lt;/figcaption&gt;

&lt;p&gt;Podemos observar no código abaixo que a variável &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_1&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_2&lt;/code&gt; possuem os ids diferentes, mas o valor de index 0 de ambas as listas possuem o mesmo id.&lt;/p&gt;

&lt;p&gt;Podemos usar o operador &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; para comparar os valores, enquanto o &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; é utilizado para comparar os ids&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;lista_1 = [1, 3, 5, 7]
lista_2 = [1, 3, 5, 7]

# ids das variáveis sao diferentes
print(id(lista_1))
print(id(lista_2))

# ids do index 0 sao iguais
print(id(lista_1[0]))
print(id(lista_2[0]))

# verdadeiro, pois os valores sao iguais
print(lista_1 == lista_2)

# falso, pois os ids sao diferentes
print(lista_1 is lista_2)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/35254604b2ce26757ff7bdb1ae61bd26.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Caso atribuirmos o valor de &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_2&lt;/code&gt; em &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_1&lt;/code&gt;, eles terão o mesmo id.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;lista_2 = [1, 3, 5, 7]

lista_1 = lista_2

# os ids serao os mesmos
print(id(lista_1))
print(id(lista_2))

# verdadeiro, pois os valores sao iguais
print(lista_1 == lista_2)

# verdadeiro, pois tem a mesma referencia
print(lista_1 is lista_2)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/2219a404ebd014633f03ce53ca2f4b3c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Atente-se quando for manipular uma lista ou dicionário que for atribuída a uma outra variável para nāo perder os valores do objeto, pois estaremos alterando a mesma referência!&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;dicionario_1 = {&amp;#39;nome&amp;#39;: &amp;#39;beatriz&amp;#39;}

dicionario_2 = dicionario_1

dicionario_2[&amp;#39;linguagem&amp;#39;] = &amp;#39;python&amp;#39;

print(dicionario_1)
# {&amp;#39;nome&amp;#39;: &amp;#39;beatriz&amp;#39;, &amp;#39;linguagem&amp;#39;: &amp;#39;python&amp;#39;}

print(dicionario_2)
# {&amp;#39;nome&amp;#39;: &amp;#39;beatriz&amp;#39;, &amp;#39;linguagem&amp;#39;: &amp;#39;python&amp;#39;}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/d0081a5b9ee6bbfed64cd8b4162a8f1e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Para a alteração não afetar a variável original, podemos usar o módulo &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; com as funçōes &lt;a href=&quot;https://docs.python.org/pt-br/3/library/copy.html?highlight=copy#copy.copy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt;&lt;/a&gt;, que retorna uma cópia rasa, e &lt;a href=&quot;https://docs.python.org/pt-br/3/library/copy.html?highlight=copy#copy.deepcopy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deepcopy()&lt;/code&gt;&lt;/a&gt;, que retorna uma cópia profunda.&lt;/p&gt;

&lt;h2 id=&quot;copy&quot;&gt;copy&lt;/h2&gt;
&lt;p&gt;No código abaixo estamos usando a função &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt;&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;import copy

lista_1 = [1,2, [9,8]]

# fazendo a copia rasa
lista_2 = copy.copy(lista_1)

print(id(lista_1))
#4527883760

print(id(lista_2))
#4549096704

lista_2[2].append(7)

print(lista_2)
#[1, 2, [9, 8, 7]]

print(lista_1)
#[1, 2, [9, 8, 7]]

print(id(lista_1[2]))
#4549332496

print(id(lista_2[2]))
#4549332496&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/c78e72f96cd8568611cba991e98997a4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Notamos que ao alterar a lista interna (index 2) da variável &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_2&lt;/code&gt; alterou também a variável &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_1&lt;/code&gt;. Podemos dizer que tanto a &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_1&lt;/code&gt; quanto a &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_2&lt;/code&gt; “apontam” para a mesma lista interna (&lt;code class=&quot;highlighter-rouge&quot;&gt;[9,8]&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lista-manipulacao.jpg&quot; alt=&quot;Desenho ilustrativos das variaveis lista_1 e lista_2 apontando para a mesma lista [9,8]&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Desenho ilustrativos das variaveis lista_1 e lista_2 apontando para a mesma lista [9,8]&lt;/figcaption&gt;

&lt;h2 id=&quot;deepcopy&quot;&gt;deepcopy&lt;/h2&gt;
&lt;p&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;deepcopy()&lt;/code&gt; é feita uma cópia profunda&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import copy

lista_1 = [1,2, [9,8]]

# fazendo a cópia profunda
lista_2 = copy.deepcopy(lista_1)

print(id(lista_1))
#4548273648

print(id(lista_2))
#4543572480

print(id(lista_1[2]))
#4547001952

print(id(lista_2[2]))
#4543706128&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/b1ddc80c92da70608384fa0f7864d719.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;As variáveis não compartilham da mesma referência quando usado o &lt;code class=&quot;highlighter-rouge&quot;&gt;deepcopy()&lt;/code&gt;,logo o index 2 da variável &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_1&lt;/code&gt; e da variável &lt;code class=&quot;highlighter-rouge&quot;&gt;lista_2&lt;/code&gt; são diferentes.&lt;/p&gt;

&lt;p&gt;Espero que esse post tenha ficado simples e que você tenha entendido sobre referência de objetos!&lt;/p&gt;

&lt;p&gt;Obrigada por ter lido &amp;lt;3&lt;/p&gt;

&lt;hr /&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="variável" /><category term="memória" /><category term="referência de objetos" /><summary type="html">Já aconteceu de você ter duas variáveis com os mesmos valores e alterar uma variável a outra também é alterada?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/lista.jpg" /></entry><entry><title type="html">Entendendo map, filter, reduce e lambda</title><link href="http://localhost:4000/entendendo-map-filter-reduce-lambda/" rel="alternate" type="text/html" title="Entendendo map, filter, reduce e lambda" /><published>2019-09-29T00:00:00-03:00</published><updated>2019-09-29T00:00:00-03:00</updated><id>http://localhost:4000/entendendo-map-filter-reduce-lambda</id><content type="html" xml:base="http://localhost:4000/entendendo-map-filter-reduce-lambda/">&lt;p&gt;Antes de falar sobre map, filter e reduce, precisamos entender sobre &lt;strong&gt;função de ordem superior&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;função-de-ordem-superior&quot;&gt;Função de ordem superior&lt;/h2&gt;
&lt;p&gt;Função de ordem superior é uma função que:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;recebe uma função como argumento;&lt;/li&gt;
  &lt;li&gt;ou devolve uma função como resultado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Map, filter e reduce são as funções de ordem superior mais conhecidas.&lt;/p&gt;

&lt;h2 id=&quot;map&quot;&gt;Map&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/map.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A função map recebe uma função (&lt;code class=&quot;highlighter-rouge&quot;&gt;dobrar_numero&lt;/code&gt;) e um iterável (&lt;code class=&quot;highlighter-rouge&quot;&gt;range(4)&lt;/code&gt;), cada item desse iterável (números de 0 à 3) é aplicada na função, o que faz o map retornar um objeto map e convertemos esse resultado em uma lista.&lt;/p&gt;

&lt;h2 id=&quot;filter&quot;&gt;Filter&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/filter.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A função filter recebe uma função (&lt;code class=&quot;highlighter-rouge&quot;&gt;maior_que_zero&lt;/code&gt;) e um iterável (&lt;code class=&quot;highlighter-rouge&quot;&gt;valores&lt;/code&gt;), cada item do iterável é aplicada a condição da função que faz o “filtro”, retornando também um objeto filter e convertemos o resultado em uma lista&lt;/p&gt;

&lt;h2 id=&quot;reduce&quot;&gt;Reduce&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/reduce.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A ideia de usar o &lt;a href=&quot;https://docs.python.org/3.7/library/functools.html#functools.reduce&quot;&gt;reduce&lt;/a&gt; é aplicar uma função (&lt;code class=&quot;highlighter-rouge&quot;&gt;somar&lt;/code&gt;) a cada item de um iterável (&lt;code class=&quot;highlighter-rouge&quot;&gt;range(5)&lt;/code&gt;, ou seja, números de 0 à 4) a fim de ser “reduzida” a um único valor.&lt;/p&gt;

&lt;p&gt;É possível passar um terceiro parâmetro opcional para inicializar o valor da função:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/reduce-initializer.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lambda&quot;&gt;Lambda&lt;/h2&gt;

&lt;p&gt;Função lambda também é conhecida como função anônima, e é comum vermos a função lambda ser usada junto com map, filter ou reduce afim de encurtar as funções criadas pelo comando &lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;map-e-lambda&quot;&gt;Map e lambda&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/map-lambda.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;filter-e-lambda&quot;&gt;Filter e lambda&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/filter-lambda.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reduce-e-lambda&quot;&gt;Reduce e lambda&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/reduce-lambda.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deixando-map-filter-e-reduce-mais-legíveis&quot;&gt;Deixando map, filter e reduce mais legíveis&lt;/h2&gt;

&lt;p&gt;Para tornar o código mais legível é possível substituir as funções map e filter por list comprehension e a função reduce por &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;any()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Como já diz no &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt; Zen of Python&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Readability counts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;list-comprehension&quot;&gt;List Comprehension&lt;/h3&gt;

&lt;h4 id=&quot;map-vs-list-comprehension&quot;&gt;map vs list comprehension&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/map-lambda.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;código usando map&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/listcomp-map.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;código substituindo map por list comprehension&lt;/figcaption&gt;

&lt;h4 id=&quot;filter-vs-list-comprehension&quot;&gt;filter vs list comprehension&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/filter-lambda.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;código usando filter&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/listcomp-filter.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;código substituindo filter por list comprehension&lt;/figcaption&gt;

&lt;h4 id=&quot;reduce-vs-sum-all-any&quot;&gt;reduce vs sum, all, any&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/reduce-lambda.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;código usando filter&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sum.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;código substituindo reduce por sum&lt;/figcaption&gt;

&lt;p&gt;A função &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; recebe um iterável e se todos os elementos forem verdadeiros a função retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/all.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;figcaption class=&quot;caption&quot;&gt;exemplo de código utilizando a função all&lt;/figcaption&gt;

&lt;p&gt;A função &lt;code class=&quot;highlighter-rouge&quot;&gt;any()&lt;/code&gt; recebe um iterável e se algum elemento for verdadeiro a função retorna &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;
&lt;img src=&quot;/assets/images/any.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;exemplo de código utilizando a função any&lt;/figcaption&gt;

&lt;p&gt;Espero que esse post tenha ficado simples e que você tenha entendido sobre map, filter, reduce e lambda!&lt;/p&gt;

&lt;p&gt;Obrigada por ter lido &amp;lt;3&lt;/p&gt;

&lt;hr /&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="python" /><category term="map" /><category term="filter" /><category term="reduce" /><category term="lambda" /><category term="list comprehension" /><summary type="html">Antes de falar sobre map, filter e reduce, precisamos entender sobre função de ordem superior.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/lambda-icon.png" /></entry><entry><title type="html">Configurando o Atom para programar em Python</title><link href="http://localhost:4000/configurando-atom/" rel="alternate" type="text/html" title="Configurando o Atom para programar em Python" /><published>2019-09-22T00:00:00-03:00</published><updated>2019-09-22T00:00:00-03:00</updated><id>http://localhost:4000/configurando-atom</id><content type="html" xml:base="http://localhost:4000/configurando-atom/">&lt;p&gt;Editor bom é aquele que você se sente mais produtiva para programar&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;atom&quot;&gt;Atom&lt;/h2&gt;
&lt;p&gt;O Atom é um editor de texto open source desenvolvido pelo GitHub e construído com &lt;a href=&quot;https://github.com/electron/electron&quot;&gt;Electron&lt;/a&gt;. É o editor que mais gosto de usar, já testei alguns, mas não consegui me adaptar ou talvez me falte paciência e tempo para isso ¯\_(ツ)_/¯. Vou listar os plugins que uso:&lt;/p&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;

&lt;h4 id=&quot;file-icons&quot;&gt;&lt;a href=&quot;https://atom.io/packages/file-icons&quot;&gt;file-icons&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/file-icons.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gosto de usar esse plugin para os arquivos ficarem com ícones das extensões&lt;/p&gt;

&lt;h4 id=&quot;linter-flake8&quot;&gt;&lt;a href=&quot;https://atom.io/packages/linter-flake8&quot;&gt;linter-flake8&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/linter-flake8.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linter é uma ferramenta de análise de código que acusa os erros sintáticos, ajuda bastante se você esquece de fechar &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt; (para evitar isso, se você abrir já fecha para não correr o risco de fechar os parênteses, chaves, colchetes ou aspas), de colocar &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; no final de algum comando entre outras coisas.&lt;/p&gt;

&lt;p&gt;Linter para python usando flake8, precisa instalar o flake8(&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install flake8&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&quot;linter&quot;&gt;&lt;a href=&quot;https://atom.io/packages/linter&quot;&gt;linter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/linter.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esse plugin é uma dependência do linter-flake8&lt;/p&gt;

&lt;h4 id=&quot;highlight-selected&quot;&gt;&lt;a href=&quot;https://atom.io/packages/highlight-selected&quot;&gt;highlight-selected&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/highlight-selected.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao dar um clique duplo em uma palavra, realça as demais ocorrências&lt;/p&gt;

&lt;h4 id=&quot;sublime-style-column-selection&quot;&gt;&lt;a href=&quot;https://atom.io/packages/sublime-style-column-selection&quot;&gt;sublime-style-column-selection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/column-selection.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Possibilita selecionar multiplas linhas e selecionar um bloco de código em cada linha. Isso é nativo do sublime e lembro de ter isso também no notepad++&lt;/p&gt;

&lt;h4 id=&quot;busy-signal&quot;&gt;&lt;a href=&quot;https://atom.io/packages/busy-signal&quot;&gt;busy-signal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/busy-signal.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mostra que o pacote está executando alguma tarefa&lt;/p&gt;

&lt;h4 id=&quot;platformio-ide-terminal&quot;&gt;&lt;a href=&quot;https://atom.io/packages/platformio-ide-terminal&quot;&gt;platformio-ide-terminal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/terminal.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;terminal no editor&lt;/p&gt;

&lt;h4 id=&quot;autocomplete-python&quot;&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-python&quot;&gt;autocomplete-python&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/autocomplete-python.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;o próprio nome já diz, rs&lt;/p&gt;

&lt;h4 id=&quot;python-isort&quot;&gt;&lt;a href=&quot;https://atom.io/packages/python-isort&quot;&gt;python-isort&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/isort.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;deixa os imports na ordem certa&lt;/p&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="atom" /><category term="ide" /><category term="python" /><category term="plugin" /><summary type="html">Editor bom é aquele que você se sente mais produtiva para programar</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/atom.png" /></entry><entry><title type="html">Visualizando query SQL a partir do ORM Django</title><link href="http://localhost:4000/visualizando-query-sql-a-partir-do-orm-django/" rel="alternate" type="text/html" title="Visualizando query SQL a partir do ORM Django" /><published>2019-02-27T22:58:00-03:00</published><updated>2019-02-27T22:58:00-03:00</updated><id>http://localhost:4000/visualizando-query-sql-a-partir-do-orm-django</id><content type="html" xml:base="http://localhost:4000/visualizando-query-sql-a-partir-do-orm-django/">&lt;p&gt;Falei sobre esse assunto na palestra que fiz na TDC 2017 (The Developer’s Conference) e vou mostrar como visualizar query SQL do ORM do Django.&lt;/p&gt;

&lt;p&gt;Um dos motivos para falar sobre esse assunto foi a dificuldade que tive para entender como funcionava a ORM do Django. Em uma das minhas primeiras experiências com Django precisei gerar um relatório e como já tinha trabalhado com SQL resolvi fazer com SQL mesmo e posteriormente e passaria a query pra ORM pra entender. Uma maneira simples para o meu entendimento foi associar o que eu sabia de SQL para entender o ORM.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;orm-o-que&quot;&gt;ORM o que?&lt;/h2&gt;

&lt;p&gt;ORM significa Object Relational Mapper e é uma biblioteca que automatiza a transferência de dados do banco de dados relacional entre objetos do model. O legal de se usar é que pode acelerar a velocidade do desenvolvimento permitindo ler, escrever, atualizar e deletar dados do banco, além de ser compatível com diferentes banco de dados (MySQL, SQLite, PostgreSQL…) e ser nativa no Django.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/relacao-tabela-vs-classes.png&quot; alt=&quot;Relação tabela vs classes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;https://www.fullstackpython.com/object-relational-mappers-orms.html&lt;/figcaption&gt;

&lt;h2 id=&quot;model-vs-tabela&quot;&gt;Model vs Tabela&lt;/h2&gt;

&lt;p&gt;Criei um exemplo (e você pode conferir nesse repositório &lt;a href=&quot;https://github.com/beatrizuezu/de-sql-para-orm-django&quot;&gt;aqui&lt;/a&gt; e fazer na sua máquina para entender também) para mostrar como fica no model e na tabela do banco de dados (estou usando mysql).&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#categorias/model.py
class Categoria(models.Model):
    nome = models.CharField(&amp;#39;Nome&amp;#39;, max_length=128)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/92faae7b82cbf932c3983e14e3717ea9.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;#produtos/models.py
class Produto(models.Model):
    nome = models.CharField(
        &amp;#39;Nome&amp;#39;,
        max_length=128
    )
    valor = models.DecimalField(
        &amp;#39;Valor&amp;#39;,
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True
    )
    categoria = models.ForeignKey(Categoria)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/5ec77ef4799a3d1b5e8a178e5d9fa6de.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Enquanto no banco de dados temos:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;mysql&amp;gt; desc categorias_categoria;
+-------+--------------+------+-----+---------+----------------+
| Field | Type         | Null | Key | Default | Extra          |
+-------+--------------+------+-----+---------+----------------+
| id    | int(11)      | NO   | PRI | NULL    | auto_increment |
| nome  | varchar(128) | NO   |     | NULL    |                |
+-------+--------------+------+-----+---------+----------------+
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/dfbe3a002291767f2e3d0d8b3ed3432b.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;mysql&amp;gt; desc produtos_produto;
+--------------+---------------+------+-----+---------+----------------+
| Field        | Type          | Null | Key | Default | Extra          |
+--------------+---------------+------+-----+---------+----------------+
| id           | int(11)       | NO   | PRI | NULL    | auto_increment |
| nome         | varchar(128)  | NO   |     | NULL    |                |
| valor        | decimal(10,2) | YES  |     | NULL    |                |
| categoria_id | int(11)       | NO   | MUL | NULL    |                |
+--------------+---------------+------+-----+---------+----------------+
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/20a162167367e2fed3171404bc251c67.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;como-funciona&quot;&gt;Como Funciona?&lt;/h2&gt;

&lt;p&gt;Tenho uma determinada ORM, vou utilizar essa abaixo como exemplo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Produto.objects.all()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vamos entender o fluxo para obtermos o script SQL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fluxo-script-sql.png&quot; alt=&quot;Fluxo para obtermos o script SQL&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Fluxo parar obtermos o script SQL &lt;/figcaption&gt;

&lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt;
&lt;p&gt;É a representação dos dados, contém os campos e os métodos. No nosso exemplo, o nosso model é Produto.&lt;/p&gt;

&lt;h3 id=&quot;manager&quot;&gt;Manager&lt;/h3&gt;
&lt;p&gt;O manager está acoplado ao Model, para acessar qualquer objeto salvo no banco é preciso acessar o Manager, isto é o objects presente em todo Model.&lt;/p&gt;

&lt;h3 id=&quot;queryset&quot;&gt;QuerySet&lt;/h3&gt;
&lt;p&gt;É o conjunto de ações quer serão realizadas no banco (select, insert, update, delete). Representado pelo &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; no nosso exemplo.&lt;/p&gt;

&lt;h3 id=&quot;query&quot;&gt;Query&lt;/h3&gt;
&lt;p&gt;Cria uma estrutura de dados complexa com todos os elementos presentes em uma consulta. É gerado uma representação SQL de um QuerySet, ou seja, é através desse método que conseguimos ver as conversões do ORM para SQL (MySQL, PostgreSQL, SQLite).&lt;/p&gt;

&lt;h3 id=&quot;sqlcompiler&quot;&gt;SQLCompiler&lt;/h3&gt;
&lt;p&gt;Recebe o SQL da Query e executa de acordo com as regras específicas do backend escolhido.&lt;/p&gt;

&lt;h2 id=&quot;métodos&quot;&gt;Métodos&lt;/h2&gt;
&lt;p&gt;Vou abordar alguns métodos da ORM, você pode visualizar todos os métodos &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/querysets/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;all&quot;&gt;.all()&lt;/h3&gt;
&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;.all()&lt;/code&gt; retornará todos os produtos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]:from core.produtos.models import Produto
In [2]:Produto.objects.all()
Out [2]:&amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 4 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 1 da Categoria 2&amp;gt;, &amp;lt;Produto: Produto 2 da Categoria 2&amp;gt;,
&amp;lt;Produto: Produto 3 da Categoria 2&amp;gt;, &amp;lt;Produto: Produto 4 da Categoria 2&amp;gt;,
&amp;lt;Produto: Produto 5 da Categoria 2&amp;gt;, &amp;lt;Produto: Produto 1 da Categoria 3&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 3&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 3&amp;gt;,
&amp;lt;Produto: Produto 4 da Categoria 3&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 3&amp;gt;,
&amp;lt;Produto: Produto 1 da Categoria 4&amp;gt;, &amp;lt;Produto: Produto 2 da Categoria 4&amp;gt;,
&amp;lt;Produto: Produto 3 da Categoria 4&amp;gt;, &amp;lt;Produto: Produto 4 da Categoria 4&amp;gt;,
&amp;lt;Produto: Produto 5 da Categoria 4&amp;gt;, ‘…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e para visualizarmos o script SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.all()
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filter&quot;&gt;.filter()&lt;/h3&gt;
&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt; retornará todos os produtos em uma determinada condição.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.filter(id=1)
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e para visualizarmos o script SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.filter(id=1)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto` WHERE `produtos_produto`.`id` = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filtercampo__lookup&quot;&gt;.filter(campo__lookup)&lt;/h3&gt;
&lt;p&gt;Podemos passar lookups quando utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt;, você pode conferir todos os lookups &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/querysets/#field-lookups&quot;&gt;aqui&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.filter(id__in=[1,3,5])
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e para visualizarmos o script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.filter(id__in=[1, 3 ,5])
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto` WHERE `produtos_produto`.`id` IN (1, 3, 5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filterfk__campo&quot;&gt;.filter(fk__campo)&lt;/h3&gt;

&lt;p&gt;Conseguimos acessar o campo de uma chave estrangeira utilizando ORM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.filter(categoria__nome='categoria_1')
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 4 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.filter(categoria__nome='categoria_1')
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto`
INNER JOIN `categorias_categoria` ON (
  `produtos_produto`.`categoria_id` = `categorias_categoria`.`id`
)
WHERE `categorias_categoria`.`nome` = categoria_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;o interessante é que não precisamos nos preocupar com os joins do SQL quando utilizamos ORM!&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;.get()&lt;/h3&gt;
&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; é semelhante ao &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt;, vamos entender as diferenças posteriormente.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.get(id=1)
Out[2]: &amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.get(id=1)
In [4]: print(orm.query)
 — — — — — —— — — — — — — — — — — — — — — — — — — — — — — — — —
AttributeError Traceback (most recent call last)
&amp;lt;ipython-input-4–9d5bf753c2b6&amp;gt; in &amp;lt;module&amp;gt;()
 — → 1 print(script.query)
AttributeError: ‘Produto’ object has no attribute ‘query’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EITA! Caímos em um erro. Isso ocorreu porque diferente do &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt;, o &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; não retorna um queryset e sim o objeto do model.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [5]: script = Produto.objects.filter(id=1)
In [6]: type(script)
Out[6]: django.db.models.query.QuerySet
In [7]: script = Produto.objects.get(id=1)
In [8]: type(script)
Out[8]: core.produtos.models.Produto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mas ainda sim conseguimos visualizar o SQL dessa ORM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [5]: from django.db import connection
In [6]: connection.queries
Out[6]: [{'sql':
'SELECT
  `produto_produto`.`id`, `produto_produto`.`nome`,
  `produto_produto`.`valor`, `produto_produto`.`categoria_id`
FROM `produto_produto`
WHERE `produto_produto`.`id` = 1',
'time': '0.000'}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exclude&quot;&gt;.exclude()&lt;/h3&gt;
&lt;p&gt;Esse método trará os objetos que não correspondem aos parâmetros fornecidos:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.exclude(id__gte=4)
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.exclude(id__gte=4)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto` WHERE NOT (`produtos_produto`.`id` &amp;gt;= 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;values&quot;&gt;.values()&lt;/h3&gt;
&lt;p&gt;Com o &lt;code class=&quot;highlighter-rouge&quot;&gt;.values()&lt;/code&gt; podemos passar os campos que sejam retornados no queryset, além disso a queryset retornará dicionários.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.values(‘nome’, ‘valor’)
Out[2]: &amp;lt;QuerySet [
{‘valor’: Decimal(‘2.00’), ‘nome’: ‘Produto 1 da Categoria 1’},
{‘valor’: Decimal(‘5.00’), ‘nome’: ‘Produto 2 da Categoria 1’},
{‘valor’: Decimal(‘20.00’), ‘nome’: ‘Produto 3 da Categoria 1’},
{‘valor’: Decimal(‘15.00’), ‘nome’: ‘Produto 4 da Categoria 1’},
{‘valor’: Decimal(‘10.00’), ‘nome’: ‘Produto 5 da Categoria 1’},
{‘valor’: Decimal(‘5.00’), ‘nome’: ‘Produto 1 da Categoria 2’},
{‘valor’: Decimal(‘7.00’), ‘nome’: ‘Produto 2 da Categoria 2’},
{‘valor’: Decimal(‘20.00’), ‘nome’: ‘Produto 3 da Categoria 2’},
‘…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.values(‘nome’, ‘valor’)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`nome`, `produtos_produto`.`valor`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;values_list&quot;&gt;.values_list()&lt;/h3&gt;
&lt;p&gt;Similar ao &lt;code class=&quot;highlighter-rouge&quot;&gt;.values()&lt;/code&gt;, a diferença é que a queryset retorna tupla.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.values_list(‘nome’)
Out[2]: &amp;lt;QuerySet [
(‘Produto 1 da Categoria 1’,), (‘Produto 2 da Categoria 1’,),
(‘Produto 3 da Categoria 1’,), (‘Produto 4 da Categoria 1’,),
(‘Produto 5 da Categoria 1’,), (‘Produto 1 da Categoria 2’,),
(‘Produto 2 da Categoria 2’,), (‘Produto 3 da Categoria 2’,),
(‘Produto 4 da Categoria 2’,),’…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.values_list(‘nome’)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`nome`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;values_listfield-flattrue&quot;&gt;.values_list(field, flat=True)&lt;/h3&gt;
&lt;p&gt;Quando utilizamos o flat=True como paramêtro do &lt;code class=&quot;highlighter-rouge&quot;&gt;.values_list()&lt;/code&gt; o resultado são retornado em valores únicos ao em vez de tuplas.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.values_list(‘nome’, flat=True)
Out[2]:&amp;lt;QuerySet [‘Produto 1 da Categoria 1’, ‘Produto 2 da Categoria 1’,
‘Produto 3 da Categoria 1’, ‘Produto 4 da Categoria 1’,
‘Produto 5 da Categoria 1’, ‘Produto 1 da Categoria 2’,
‘Produto 2 da Categoria 2’, ‘Produto 3 da Categoria 2’,
‘Produto 4 da Categoria 2’, ‘Produto 5 da Categoria 2’,
‘Produto 1 da Categoria 3’, ‘Produto 2 da Categoria 3’,
‘…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.values_list(‘nome’, flat=True)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`nome`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;annotate&quot;&gt;.annotate()&lt;/h3&gt;
&lt;p&gt;Retorna um queryset agrupado levando em consideração cada objeto.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: from django.db.models import Sum
In [3]: Produto.objects.values(‘categoria’).annotate(Sum(‘valor’))
Out[3]: &amp;lt;QuerySet [{‘valor__sum’: Decimal(‘52.00’), ‘categoria’: 1},
{‘valor__sum’: Decimal(‘66.00’), ‘categoria’: 2},
{‘valor__sum’: Decimal(‘147.60’), ‘categoria’: 3},
{‘valor__sum’: Decimal(‘209.30’), ‘categoria’: 4},
{‘valor__sum’: Decimal(‘87.20’), ‘categoria’: 5}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima foi agrupado a soma de todas as categorias dos produtos.&lt;/p&gt;

&lt;p&gt;Visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: orm = Produto.objects.values(‘categoria’).annotate(Sum(‘valor’))
In [5]: print(orm.query)
SELECT
  `produtos_produto`.`categoria_id`,
  SUM(`produtos_produto`.`valor`) AS `valor__sum`
FROM `produtos_produto`
GROUP BY `produtos_produto`.`categoria_id` ORDER BY NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aggregate&quot;&gt;.aggregate()&lt;/h3&gt;
&lt;p&gt;Semelhante ao &lt;code class=&quot;highlighter-rouge&quot;&gt;.annotate()&lt;/code&gt; com a diferença de retornar um dicionário com valores agregados calculado sobre todo o queryset&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: from django.db.models import Avg, Max, Min
In [3]: Produto.objects.aggregate(
   ...: valor_maximo=Max('valor'),
   ...: valor_minimo=Min('valor'),
   ...: valor_medio=Avg('valor')
   ...: )
Out[3]:
{'valor_maximo': Decimal('100.00'),
 'valor_medio': 22.484,
 'valor_minimo': Decimal('2.00')}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visualizando SQL:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: orm = Produto.objects.aggregate(
 …: valor_maximo=Max(‘valor’),
 …: valor_minimo=Min(‘valor’),
 …: valor_medio=Avg(‘valor’)
 …: )
In [5]: print(orm.query)
 — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -
AttributeError Traceback (most recent call last)
&amp;lt;ipython-input-5–02ba74239328&amp;gt; in &amp;lt;module&amp;gt;()
 — → 1 print(orm.query)
AttributeError: ‘dict’ object has no attribute ‘query’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Caímos no erro novamente, o &lt;code class=&quot;highlighter-rouge&quot;&gt;.aggregate()&lt;/code&gt; não retona um queryset.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: orm = Produto.objects.values(‘categoria’).annotate(Sum(‘valor’))
In [5]: type(orm)
Out[5]: django.db.models.query.QuerySet
In [6]: orm = Produto.objects.aggregate(
 …: valor_maximo=Max(‘valor’),
 …: valor_minimo=Min(‘valor’),
 …: valor_medio=Avg(‘valor’)
 …: )
In [7]: type(orm)
Out[7]: dict
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assim como &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; também conseguimos visualizar a query SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: from django.db import connection
In [5]: connection.queries
Out[5]:
[{‘sql’: ‘SELECT
  MAX(`produtos_produto`.`valor`) AS `valor_maximo`,
  AVG(`produtos_produto`.`valor`) AS `valor_medio`,
  MIN(`produtos_produto`.`valor`) AS `valor_minimo`
FROM `produtos_produto`’,
 ‘time’: ‘0.000’}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;queryset-são-lazy&quot;&gt;QuerySet são Lazy&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Todos os métodos que retornam um QuerySet&lt;/strong&gt; são considerados lazy.&lt;/p&gt;

&lt;p&gt;Se eu tiver essas consultas abaixo, quantas consultas foram realizadas no banco de dados?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: produtos = Produto.objects.all()
In [3]: categoria_2 = produtos.filter(categoria=2)
In [4]: lista_produto = produtos.values_list(‘nome’, flat=True)
In [5]: print(lista_produto)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;APENAS UMA!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: from django.db import connection
In [3]: produtos = Produto.objects.all()
In [4]: categoria_2 = produtos.filter(categoria=2)
In [5]: lista_produto = produtos.values_list(‘nome’, flat=True)
In [6]: print(len(connection.queries))
0
In [7]: print(lista_produto)
&amp;lt;QuerySet [‘Produto 1 da Categoria 1’, ‘Produto 2 da Categoria 1’,
‘Produto 3 da Categoria 1’, ‘Produto 4 da Categoria 1’,
‘Produto 5 da Categoria 1’, ‘Produto 1 da Categoria 2’,
‘Produto 2 da Categoria 2’, ‘Produto 3 da Categoria 2’,
‘Produto 4 da Categoria 2’, ‘Produto 5 da Categoria 2’,
‘Produto 1 da Categoria 3’, ‘Produto 2 da Categoria 3’,
‘Produto 3 da Categoria 3’, ‘Produto 4 da Categoria 3’,
‘Produto 5 da Categoria 3’, ‘Produto 1 da Categoria 4’,
‘Produto 2 da Categoria 4’, ‘Produto 3 da Categoria 4’,
‘Produto 4 da Categoria 4’, ‘Produto 5 da Categoria 4’,
‘…(remaining elements truncated)…’]&amp;gt;
In [8]: print(len(connection.queries))
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Isso significa que as consulta são realizadas no banco de dados quando pedimos. Mas quando pedimos?&lt;/p&gt;

&lt;p&gt;Podemos pedir para serem executadas nas seguintes formas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quando solicitamos somente um resultado:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Produto.objects.all()[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando fazemos um slicinf passando um “step”:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Produtos.objects.all()[::2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando iteramos:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; categoria for categoria in Categoria.objects.all()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos o método len() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; len(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos um list() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; list(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos um bool() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; bool(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos o repr() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; repr(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dicas&quot;&gt;DICAS&lt;/h2&gt;

&lt;h3 id=&quot;reset_queries&quot;&gt;reset_queries&lt;/h3&gt;
&lt;p&gt;Se precisar limpar a lista de query do connection, utilize:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db import reset_queries
&amp;gt;&amp;gt; reset_queries()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;django-logging&quot;&gt;Django logging&lt;/h3&gt;
&lt;p&gt;Caso queira que a query sql apareça toda vez que seja executada uma consulta orm, adicione ao arquivo &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;...

LOGGING = {
    &amp;#39;version&amp;#39;: 1,
    &amp;#39;disable_existing_loggers&amp;#39;: False,
    &amp;#39;handlers&amp;#39;: {
        &amp;#39;console&amp;#39;: {
            &amp;#39;class&amp;#39;: &amp;#39;logging.StreamHandler&amp;#39;,
        },
    },
    &amp;#39;loggers&amp;#39;: {
        &amp;#39;django&amp;#39;: {
            &amp;#39;handlers&amp;#39;: [&amp;#39;console&amp;#39;],
            &amp;#39;level&amp;#39;: &amp;#39;DEBUG&amp;#39;,
        },
    },
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/deb68f559403ab9c0ad709c991d3e496.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Espero que tenha ajudado a entender um pouco sobre ORM Django :)&lt;/p&gt;

&lt;p&gt;Obrigada ❤&lt;/p&gt;

&lt;p&gt;esse post foi originalmente escrito no &lt;a href=&quot;https://medium.com/@beatrizuezu/visualizando-query-sql-a-partir-do-orm-django-5771370a9c55&quot;&gt;Medium&lt;/a&gt; no dia 07/08/2017&lt;/p&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="django" /><category term="orm" /><category term="sql" /><summary type="html">Falei sobre esse assunto na palestra que fiz na TDC 2017 (The Developer’s Conference) e vou mostrar como visualizar query SQL do ORM do Django.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/relacao-tabela-vs-classes.png" /></entry><entry><title type="html">PyLadies &amp;amp; Django Girls: do medo ao incentivo</title><link href="http://localhost:4000/pyladies-e-django-girls-do-medo-ao-incentivo/" rel="alternate" type="text/html" title="PyLadies &amp; Django Girls: do medo ao incentivo" /><published>2018-03-16T22:44:00-03:00</published><updated>2018-03-16T22:44:00-03:00</updated><id>http://localhost:4000/pyladies-e-django-girls-do-medo-ao-incentivo</id><content type="html" xml:base="http://localhost:4000/pyladies-e-django-girls-do-medo-ao-incentivo/">&lt;p&gt;Na época que fazia faculdade gostava de mexer com HTML e CSS até que eu cheguei a estagiar como Front-End. Chegou um momento do estágio que eu não me via naquilo e queria entrar na área de Banco de dados e Big Data. Como eu gostava de ler sobre o tema de Big Data ouvia falar sobre as linguagens Python e Java. Porém tinha dificuldade em programar e achava difícil, só queria entrar em Banco de Dados e Big Data porque não iria programar. (Sabe de nada, inocente).&lt;/p&gt;

&lt;p&gt;Foi aí que eu decidi a procurar vagas de Banco de Dados e até que comecei a trabalhar com desenvolvimento de software com a linguagem VB.net e SQL Server. Tive medo de ser demitida nos primeiros meses por não saber a programar, achava que precisava documentar tudo e fiquei surpresa por terem me colocado em um projeto em menos de 3 meses. Corri atrás de cursos de orientação a objetos para entender melhor o código.&lt;/p&gt;

&lt;p&gt;Consegui me formar na faculdade e uns meses depois comecei a estudar uma nova linguagem: Ruby On Rails. Ainda acho a linguagem bem legal, naquela época estava empolgada com o mundo novo, mesmo tendo estagiado como Front-end, eu estava aprendendo termos novos de Back-end e ferramentas novas!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grupo-estudo-ruby.png&quot; alt=&quot;Grupo de estudos de Ruby on Rails&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Grupo de estudos de Ruby on Rails&lt;/figcaption&gt;

&lt;p&gt;Comecei a procurar mais sobre a comunidade de Ruby. Acabei caindo num evento que seria no final do mês de novembro (de 2015), porém tinha que me inscrever e já estavam encerradas as inscrições :( . Fiquei chateada por não ter pesquisado antes e por não poder participar do evento. Continuei a pesquisar pela internet e por coincidência ia ter no mesmo dia o evento de Ruby um curso de Python! Fiz logo a minha inscrição para participar do curso básico de Python. E foi assim que eu conheci o PyLadies São Paulo ❤. Uhuuul, iria fazer um curso de Python, mais uma linguagem que eu iria conhecer. Estava empolgada para o dia, mesmo tendo que acordar cedo em um sábado de manhã e ficar o dia todo codando.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cat-typing.gif&quot; alt=&quot;gatinho codando&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No dia do curso entrei tímida na sala, sentei ao lado de uma moça e fiquei na minha. Durante o exercícios propostos, percebia que a moça tinha um pouco de dificuldade e como já tinha uma noção de programação por conta do trabalho, passei a ajudá-la com a sintaxe que eu também desconhecia. Ainda lembro do que eu senti quando comecei a reparar nas pessoas que estavam ao meu redor, nas pessoas que estavam participando do curso, nas que estavam ajudando na monitoria e nas que organizaram tudo aquilo. Senti uma sensação tão boa que eu queria também fazer parte daquilo e poder ajudar com o pouco do que eu sabia e fazer trabalho voluntário.&lt;/p&gt;

&lt;p&gt;No final do curso cheguei pra Pat e perguntei como fazia para ser monitora do próximo curso. A moça que eu ajudei ouviu o meu comentário e acabou por me elogiar. Coincidentemente ela conhecia a Alini que havia ministrado a aula.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/curso-iniciante-python.jpeg&quot; alt=&quot;Curso iniciante de Python pelo PyLadies São Paulo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Curso Iniciante de Python pelo PyLadies São Paulo&lt;/figcaption&gt;

&lt;p&gt;No primeiro curso do ano de 2016 fui umas das monitoras. Acabei conhecendo outras monitoras que também foram alunas. Nem parecia que era a primeira vez que nos encontrávamos, parecia que nos conhecíamos há muito tempo. Ser monitora me ensinou que &lt;strong&gt;o pouco que eu sei pode ser muito para quem não sabe&lt;/strong&gt; e de não ter vergonha de falar &lt;strong&gt;eu também não sei, vamos pesquisar?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/as-monitoras.jpeg&quot; alt=&quot;As monitoras - Alini, eu, Carol, Ariadyne, Élida, Pat&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;As monitoras (Alini, eu, Carol, Ariadyne, Élida, Pat)&lt;/figcaption&gt;

&lt;p&gt;Para o curso seguinte brinquei que poderia dar a aula, pois tinha gostado muito de ter sido monitora, e as meninas da organização levaram a sério, rs. Então elas me chamaram para dar o segundo curso de iniciante. Aceitei na hora! Foi a minha primeira experiência em lecionar para um monte de gente! É claro que fiquei nervosa e ansiosa no dia anterior, fiquei treinando os slides e pensando no modo que eu poderia explicar, com receio de falar algo errado ou das meninas não entenderem nada do que eu estava falando, ainda mais quando eu via que elas olhavam com uma cara de interrogação para a tela. Daí foi chegar junto e ver se a menina estava concentrada ou realmente com dúvida, nem sempre elas falam que não estão entendendo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/beatriz-ensinando.jpeg&quot; alt=&quot;Beatriz ensinando&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nunca pensei que pudesse ensinar tantas pessoas juntas dentro de um única sala de aula. No término da aula saí super feliz com a sensação de um dever cumprido e de quebrar uma barreira: falar em público.&lt;/p&gt;

&lt;p&gt;Fazer parte do PyLadies não é apenas aprender, ensinar e conversar sobre Python. É também conhecer outras meninas incríveis que se interessam em programação e poder falar sobre qualquer assunto! É uma irmandade ❤&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/amigas-meetup.jpeg&quot; alt=&quot;Amigas no meetup&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Eliete, Roberta, Carol, Duda, eu, Alini&lt;/figcaption&gt;

&lt;p&gt;Em umas das conversas com a Alini sobre frameworks, comentei que poderia ter um Django Girls em São Paulo e ela dizia: ‘Por que você não tenta organizar ? ‘, daí eu ficava pensativa por não conhecer o framework e nem saber mexer com Django. Eu estava tão envolvida com a comunidade Python que eu decidi sair da minha zona de conforto e comecei a procurar vagas de Python. Pouco tempo depois fui contratada para trabalhar com Django!&lt;/p&gt;

&lt;p&gt;Olhar para o ano de 2016 e perceber o que eu fiz na comunidade me permitiu muitas experiências novas: palestrei na TDC (The Developer Conference) e no RoadSec, fui para a Python Brasil em Florianópolis, participei do Django Girls Rio de Janeiro para trazer o Django Girls para São Paulo e conheci pessoas incríveis nesse tempo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/palestra-tdc.jpeg&quot; alt=&quot;Palestra na The Developer Conferece&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Palestra na The Developer Conferece
&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pyladies-roadsec.jpeg&quot; alt=&quot;PyLadies São Paulo, Campinas e São Carlos na RoadSec&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;PyLadies São Paulo, Campinas e São Carlos na RoadSec&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pyladies-sp-python-br.jpeg&quot; alt=&quot;PyLadies São Paulo na Python Brasil&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;PyLadies São Paulo na Python Brasil&lt;/figcaption&gt;

&lt;p&gt;Hoje sou uma das organizadoras do Django Girls São Paulo e a quantidade de inscrições que recebemos ( 369 inscrições!!) para o primeiro workshop não imaginava que o evento tomaria essa proporção. Não foi fácil selecionar as participantes, os treinadores e correr atrás de patrocínios. Não tenho palavras que descrevem o quão gratificante foi ver as meninas saindo com o sorriso no rosto, incentivadas a investir na área, comemorando a cada acerto e cada dificuldade superada. O primeiro Django Girls São Paulo me mostrou que eu sou capaz de ajudar e transformar a vida de outras pessoas com um simples ato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dg-1.jpeg&quot; alt=&quot;Primeiro Django Girls São Paulo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;#1 Django Girls São Paulo ❤&lt;/figcaption&gt;

&lt;p&gt;Um pouco mais de um ano, fui de aluna para a co-organização do PyLadies São Paulo e Django Girls São Paulo, esse texto é para contar um pouco da minha trajetória na programação e na comunidade Python. Também é a forma que encontrei para agradecer à coordenação do PyLadies e do Django Girls por terem acreditado em mim e no meu trabalho dentro da comunidade, cada pessoa que pude ajudar, incentivar, que me ajudou a chegar até aqui e a você que leu esse texto.&lt;/p&gt;

&lt;p&gt;Obrigada ❤&lt;/p&gt;

&lt;p&gt;esse post foi originalmente escrito no &lt;a href=&quot;https://medium.com/@beatrizuezu/pyladies-django-girls-do-medo-ao-incentivo-e23c0f8bad38&quot;&gt;Medium&lt;/a&gt; no dia 28/03/2017&lt;/p&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="pyladies" /><category term="django girls" /><category term="comunidade" /><category term="ensinar" /><category term="incentivar" /><summary type="html">Na época que fazia faculdade gostava de mexer com HTML e CSS até que eu cheguei a estagiar como Front-End. Chegou um momento do estágio que eu não me via naquilo e queria entrar na área de Banco de dados e Big Data. Como eu gostava de ler sobre o tema de Big Data ouvia falar sobre as linguagens Python e Java. Porém tinha dificuldade em programar e achava difícil, só queria entrar em Banco de Dados e Big Data porque não iria programar. (Sabe de nada, inocente).</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/dg-1.jpeg" /></entry></feed>