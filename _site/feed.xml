<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-22T12:31:12-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Beatriz Uezu Page</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">Configurando o Atom para programar em Python</title><link href="http://localhost:4000/configurando-atom/" rel="alternate" type="text/html" title="Configurando o Atom para programar em Python" /><published>2019-09-22T00:00:00-03:00</published><updated>2019-09-22T00:00:00-03:00</updated><id>http://localhost:4000/configurando-atom</id><content type="html" xml:base="http://localhost:4000/configurando-atom/">&lt;p&gt;Editor bom é aquele é você se sente mais produtiva para programar&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;atom&quot;&gt;Atom&lt;/h2&gt;
&lt;p&gt;O Atom é um editor de texto open souce desenvolvido pelo GitHub e construído com &lt;a href=&quot;https://github.com/electron/electron&quot;&gt;Electron&lt;/a&gt;. É o editor que mais gosto de usar, já testei alguns, mas não consegui me adaptar ou talvez falte paciência e tempo para isso ¯\_(ツ)_/¯. Vou listar os plugins que uso:&lt;/p&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;

&lt;h4 id=&quot;file-icons&quot;&gt;&lt;a href=&quot;https://atom.io/packages/file-icons&quot;&gt;file-icons&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/file-icons.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gosto de usar esse plugin para os arquivos ficarem com ícones das extensões&lt;/p&gt;

&lt;h4 id=&quot;linter-flake8&quot;&gt;&lt;a href=&quot;https://atom.io/packages/linter-flake8&quot;&gt;linter-flake8&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/linter-flake8.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linter é uma ferramenta de análise de código que acusa os erros sintáticos, ajuda bastante se você esquece de fechar &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt; (para evitar isso, se você abrir já fecha para não correr o risco de fechar os parênteses, chaves, colchetes ou aspas), de colocar &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; no final de algum comando entre outras coisas.&lt;/p&gt;

&lt;p&gt;Linter para python usando flake8, precisa instalar o flake8(&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install flake8&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&quot;linter&quot;&gt;&lt;a href=&quot;https://atom.io/packages/linter&quot;&gt;linter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/linter.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esse plugin é uma dependência do linter-flake8&lt;/p&gt;

&lt;h4 id=&quot;highlight-selected&quot;&gt;&lt;a href=&quot;https://atom.io/packages/highlight-selected&quot;&gt;highlight-selected&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/highlight-selected.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao dar um clique duplo em uma palavra, realça as demais ocorrências&lt;/p&gt;

&lt;h4 id=&quot;sublime-style-column-selection&quot;&gt;&lt;a href=&quot;https://atom.io/packages/sublime-style-column-selection&quot;&gt;sublime-style-column-selection&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/column-selection.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Possibilita selecionar multiplas linhas e selecionar um bloco de código em cada linha. Isso é nativo do sublime e lembro de ter isso também no notepad++&lt;/p&gt;

&lt;h4 id=&quot;busy-signal&quot;&gt;&lt;a href=&quot;https://atom.io/packages/busy-signal&quot;&gt;busy-signal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/busy-signal.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mostra que o pacote está executando alguma tarefa&lt;/p&gt;

&lt;h4 id=&quot;platformio-ide-terminal&quot;&gt;&lt;a href=&quot;https://atom.io/packages/platformio-ide-terminal&quot;&gt;platformio-ide-terminal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/terminal.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;terminal no editor&lt;/p&gt;

&lt;h4 id=&quot;autocomplete-python&quot;&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-python&quot;&gt;autocomplete-python&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/autocomplete-python.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;o próprio nome já diz, rs&lt;/p&gt;

&lt;h4 id=&quot;python-isort&quot;&gt;&lt;a href=&quot;https://atom.io/packages/python-isort&quot;&gt;python-isort&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/isort.gif&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;deixa os imports na ordem certa&lt;/p&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="atom" /><category term="ide" /><category term="python" /><category term="plugin" /><summary type="html">Editor bom é aquele é você se sente mais produtiva para programar</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/atom.png" /></entry><entry><title type="html">Visualizando query SQL a partir do ORM Django</title><link href="http://localhost:4000/visualizando-query-sql-a-partir-do-orm-django/" rel="alternate" type="text/html" title="Visualizando query SQL a partir do ORM Django" /><published>2019-02-27T22:58:00-03:00</published><updated>2019-02-27T22:58:00-03:00</updated><id>http://localhost:4000/visualizando-query-sql-a-partir-do-orm-django</id><content type="html" xml:base="http://localhost:4000/visualizando-query-sql-a-partir-do-orm-django/">&lt;p&gt;Falei sobre esse assunto na palestra que fiz na TDC 2017 (The Developer’s Conference) e vou mostrar como visualizar query SQL do ORM do Django.&lt;/p&gt;

&lt;p&gt;Um dos motivos para falar sobre esse assunto foi a dificuldade que tive para entender como funcionava a ORM do Django. Em uma das minhas primeiras experiências com Django precisei gerar um relatório e como já tinha trabalhado com SQL resolvi fazer com SQL mesmo e posteriormente e passaria a query pra ORM pra entender. Uma maneira simples para o meu entendimento foi associar o que eu sabia de SQL para entender o ORM.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;orm-o-que&quot;&gt;ORM o que?&lt;/h2&gt;

&lt;p&gt;ORM significa Object Relational Mapper e é uma biblioteca que automatiza a transferência de dados do banco de dados relacional entre objetos do model. O legal de se usar é que pode acelerar a velocidade do desenvolvimento permitindo ler, escrever, atualizar e deletar dados do banco, além de ser compatível com diferentes banco de dados (MySQL, SQLite, PostgreSQL…) e ser nativa no Django.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/relacao-tabela-vs-classes.png&quot; alt=&quot;Relação tabela vs classes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;https://www.fullstackpython.com/object-relational-mappers-orms.html&lt;/figcaption&gt;

&lt;h2 id=&quot;model-vs-tabela&quot;&gt;Model vs Tabela&lt;/h2&gt;

&lt;p&gt;Criei um exemplo (e você pode conferir nesse repositório &lt;a href=&quot;https://github.com/beatrizuezu/de-sql-para-orm-django&quot;&gt;aqui&lt;/a&gt; e fazer na sua máquina para entender também) para mostrar como fica no model e na tabela do banco de dados (estou usando mysql).&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#categorias/model.py
class Categoria(models.Model):
    nome = models.CharField(&amp;#39;Nome&amp;#39;, max_length=128)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/92faae7b82cbf932c3983e14e3717ea9.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;#produtos/models.py
class Produto(models.Model):
    nome = models.CharField(
        &amp;#39;Nome&amp;#39;,
        max_length=128
    )
    valor = models.DecimalField(
        &amp;#39;Valor&amp;#39;,
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True
    )
    categoria = models.ForeignKey(Categoria)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/5ec77ef4799a3d1b5e8a178e5d9fa6de.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Enquanto no banco de dados temos:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;mysql&amp;gt; desc categorias_categoria;
+-------+--------------+------+-----+---------+----------------+
| Field | Type         | Null | Key | Default | Extra          |
+-------+--------------+------+-----+---------+----------------+
| id    | int(11)      | NO   | PRI | NULL    | auto_increment |
| nome  | varchar(128) | NO   |     | NULL    |                |
+-------+--------------+------+-----+---------+----------------+
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/dfbe3a002291767f2e3d0d8b3ed3432b.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;mysql&amp;gt; desc produtos_produto;
+--------------+---------------+------+-----+---------+----------------+
| Field        | Type          | Null | Key | Default | Extra          |
+--------------+---------------+------+-----+---------+----------------+
| id           | int(11)       | NO   | PRI | NULL    | auto_increment |
| nome         | varchar(128)  | NO   |     | NULL    |                |
| valor        | decimal(10,2) | YES  |     | NULL    |                |
| categoria_id | int(11)       | NO   | MUL | NULL    |                |
+--------------+---------------+------+-----+---------+----------------+
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/20a162167367e2fed3171404bc251c67.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;como-funciona&quot;&gt;Como Funciona?&lt;/h2&gt;

&lt;p&gt;Tenho uma determinada ORM, vou utilizar essa abaixo como exemplo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Produto.objects.all()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vamos entender o fluxo para obtermos o script SQL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fluxo-script-sql.png&quot; alt=&quot;Fluxo para obtermos o script SQL&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Fluxo parar obtermos o script SQL &lt;/figcaption&gt;

&lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt;
&lt;p&gt;É a representação dos dados, contém os campos e os métodos. No nosso exemplo, o nosso model é Produto.&lt;/p&gt;

&lt;h3 id=&quot;manager&quot;&gt;Manager&lt;/h3&gt;
&lt;p&gt;O manager está acoplado ao Model, para acessar qualquer objeto salvo no banco é preciso acessar o Manager, isto é o objects presente em todo Model.&lt;/p&gt;

&lt;h3 id=&quot;queryset&quot;&gt;QuerySet&lt;/h3&gt;
&lt;p&gt;É o conjunto de ações quer serão realizadas no banco (select, insert, update, delete). Representado pelo &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; no nosso exemplo.&lt;/p&gt;

&lt;h3 id=&quot;query&quot;&gt;Query&lt;/h3&gt;
&lt;p&gt;Cria uma estrutura de dados complexa com todos os elementos presentes em uma consulta. É gerado uma representação SQL de um QuerySet, ou seja, é através desse método que conseguimos ver as conversões do ORM para SQL (MySQL, PostgreSQL, SQLite).&lt;/p&gt;

&lt;h3 id=&quot;sqlcompiler&quot;&gt;SQLCompiler&lt;/h3&gt;
&lt;p&gt;Recebe o SQL da Query e executa de acordo com as regras específicas do backend escolhido.&lt;/p&gt;

&lt;h2 id=&quot;métodos&quot;&gt;Métodos&lt;/h2&gt;
&lt;p&gt;Vou abordar alguns métodos da ORM, você pode visualizar todos os métodos &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/querysets/&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;all&quot;&gt;.all()&lt;/h3&gt;
&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;.all()&lt;/code&gt; retornará todos os produtos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]:from core.produtos.models import Produto
In [2]:Produto.objects.all()
Out [2]:&amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 4 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 1 da Categoria 2&amp;gt;, &amp;lt;Produto: Produto 2 da Categoria 2&amp;gt;,
&amp;lt;Produto: Produto 3 da Categoria 2&amp;gt;, &amp;lt;Produto: Produto 4 da Categoria 2&amp;gt;,
&amp;lt;Produto: Produto 5 da Categoria 2&amp;gt;, &amp;lt;Produto: Produto 1 da Categoria 3&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 3&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 3&amp;gt;,
&amp;lt;Produto: Produto 4 da Categoria 3&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 3&amp;gt;,
&amp;lt;Produto: Produto 1 da Categoria 4&amp;gt;, &amp;lt;Produto: Produto 2 da Categoria 4&amp;gt;,
&amp;lt;Produto: Produto 3 da Categoria 4&amp;gt;, &amp;lt;Produto: Produto 4 da Categoria 4&amp;gt;,
&amp;lt;Produto: Produto 5 da Categoria 4&amp;gt;, ‘…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e para visualizarmos o script SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.all()
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filter&quot;&gt;.filter()&lt;/h3&gt;
&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt; retornará todos os produtos em uma determinada condição.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.filter(id=1)
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e para visualizarmos o script SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.filter(id=1)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto` WHERE `produtos_produto`.`id` = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filtercampo__lookup&quot;&gt;.filter(campo__lookup)&lt;/h3&gt;
&lt;p&gt;Podemos passar lookups quando utilizamos o &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt;, você pode conferir todos os lookups &lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/querysets/#field-lookups&quot;&gt;aqui&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.filter(id__in=[1,3,5])
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;e para visualizarmos o script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.filter(id__in=[1, 3 ,5])
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto` WHERE `produtos_produto`.`id` IN (1, 3, 5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filterfk__campo&quot;&gt;.filter(fk__campo)&lt;/h3&gt;

&lt;p&gt;Conseguimos acessar o campo de uma chave estrangeira utilizando ORM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.filter(categoria__nome='categoria_1')
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 4 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 5 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.filter(categoria__nome='categoria_1')
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto`
INNER JOIN `categorias_categoria` ON (
  `produtos_produto`.`categoria_id` = `categorias_categoria`.`id`
)
WHERE `categorias_categoria`.`nome` = categoria_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;o interessante é que não precisamos nos preocupar com os joins do SQL quando utilizamos ORM!&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;.get()&lt;/h3&gt;
&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; é semelhante ao &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt;, vamos entender as diferenças posteriormente.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.get(id=1)
Out[2]: &amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.get(id=1)
In [4]: print(orm.query)
 — — — — — —— — — — — — — — — — — — — — — — — — — — — — — — — —
AttributeError Traceback (most recent call last)
&amp;lt;ipython-input-4–9d5bf753c2b6&amp;gt; in &amp;lt;module&amp;gt;()
 — → 1 print(script.query)
AttributeError: ‘Produto’ object has no attribute ‘query’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EITA! Caímos em um erro. Isso ocorreu porque diferente do &lt;code class=&quot;highlighter-rouge&quot;&gt;.filter()&lt;/code&gt;, o &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; não retorna um queryset e sim o objeto do model.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [5]: script = Produto.objects.filter(id=1)
In [6]: type(script)
Out[6]: django.db.models.query.QuerySet
In [7]: script = Produto.objects.get(id=1)
In [8]: type(script)
Out[8]: core.produtos.models.Produto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mas ainda sim conseguimos visualizar o SQL dessa ORM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [5]: from django.db import connection
In [6]: connection.queries
Out[6]: [{'sql':
'SELECT
  `produto_produto`.`id`, `produto_produto`.`nome`,
  `produto_produto`.`valor`, `produto_produto`.`categoria_id`
FROM `produto_produto`
WHERE `produto_produto`.`id` = 1',
'time': '0.000'}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exclude&quot;&gt;.exclude()&lt;/h3&gt;
&lt;p&gt;Esse método trará os objetos que não correspondem aos parâmetros fornecidos:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.exclude(id__gte=4)
Out[2]: &amp;lt;QuerySet [&amp;lt;Produto: Produto 1 da Categoria 1&amp;gt;,
&amp;lt;Produto: Produto 2 da Categoria 1&amp;gt;, &amp;lt;Produto: Produto 3 da Categoria 1&amp;gt;]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.exclude(id__gte=4)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`id`, `produtos_produto`.`nome`,
  `produtos_produto`.`valor`, `produtos_produto`.`categoria_id`
FROM `produtos_produto` WHERE NOT (`produtos_produto`.`id` &amp;gt;= 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;values&quot;&gt;.values()&lt;/h3&gt;
&lt;p&gt;Com o &lt;code class=&quot;highlighter-rouge&quot;&gt;.values()&lt;/code&gt; podemos passar os campos que sejam retornados no queryset, além disso a queryset retornará dicionários.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.values(‘nome’, ‘valor’)
Out[2]: &amp;lt;QuerySet [
{‘valor’: Decimal(‘2.00’), ‘nome’: ‘Produto 1 da Categoria 1’},
{‘valor’: Decimal(‘5.00’), ‘nome’: ‘Produto 2 da Categoria 1’},
{‘valor’: Decimal(‘20.00’), ‘nome’: ‘Produto 3 da Categoria 1’},
{‘valor’: Decimal(‘15.00’), ‘nome’: ‘Produto 4 da Categoria 1’},
{‘valor’: Decimal(‘10.00’), ‘nome’: ‘Produto 5 da Categoria 1’},
{‘valor’: Decimal(‘5.00’), ‘nome’: ‘Produto 1 da Categoria 2’},
{‘valor’: Decimal(‘7.00’), ‘nome’: ‘Produto 2 da Categoria 2’},
{‘valor’: Decimal(‘20.00’), ‘nome’: ‘Produto 3 da Categoria 2’},
‘…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.values(‘nome’, ‘valor’)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`nome`, `produtos_produto`.`valor`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;values_list&quot;&gt;.values_list()&lt;/h3&gt;
&lt;p&gt;Similar ao &lt;code class=&quot;highlighter-rouge&quot;&gt;.values()&lt;/code&gt;, a diferença é que a queryset retorna tupla.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.values_list(‘nome’)
Out[2]: &amp;lt;QuerySet [
(‘Produto 1 da Categoria 1’,), (‘Produto 2 da Categoria 1’,),
(‘Produto 3 da Categoria 1’,), (‘Produto 4 da Categoria 1’,),
(‘Produto 5 da Categoria 1’,), (‘Produto 1 da Categoria 2’,),
(‘Produto 2 da Categoria 2’,), (‘Produto 3 da Categoria 2’,),
(‘Produto 4 da Categoria 2’,),’…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.values_list(‘nome’)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`nome`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;values_listfield-flattrue&quot;&gt;.values_list(field, flat=True)&lt;/h3&gt;
&lt;p&gt;Quando utilizamos o flat=True como paramêtro do &lt;code class=&quot;highlighter-rouge&quot;&gt;.values_list()&lt;/code&gt; o resultado são retornado em valores únicos ao em vez de tuplas.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: Produto.objects.values_list(‘nome’, flat=True)
Out[2]:&amp;lt;QuerySet [‘Produto 1 da Categoria 1’, ‘Produto 2 da Categoria 1’,
‘Produto 3 da Categoria 1’, ‘Produto 4 da Categoria 1’,
‘Produto 5 da Categoria 1’, ‘Produto 1 da Categoria 2’,
‘Produto 2 da Categoria 2’, ‘Produto 3 da Categoria 2’,
‘Produto 4 da Categoria 2’, ‘Produto 5 da Categoria 2’,
‘Produto 1 da Categoria 3’, ‘Produto 2 da Categoria 3’,
‘…(remaining elements truncated)…’]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [3]: orm = Produto.objects.values_list(‘nome’, flat=True)
In [4]: print(orm.query)
SELECT
  `produtos_produto`.`nome`
FROM `produtos_produto`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;annotate&quot;&gt;.annotate()&lt;/h3&gt;
&lt;p&gt;Retorna um queryset agrupado levando em consideração cada objeto.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: from django.db.models import Sum
In [3]: Produto.objects.values(‘categoria’).annotate(Sum(‘valor’))
Out[3]: &amp;lt;QuerySet [{‘valor__sum’: Decimal(‘52.00’), ‘categoria’: 1},
{‘valor__sum’: Decimal(‘66.00’), ‘categoria’: 2},
{‘valor__sum’: Decimal(‘147.60’), ‘categoria’: 3},
{‘valor__sum’: Decimal(‘209.30’), ‘categoria’: 4},
{‘valor__sum’: Decimal(‘87.20’), ‘categoria’: 5}]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima foi agrupado a soma de todas as categorias dos produtos.&lt;/p&gt;

&lt;p&gt;Visualizando em SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: orm = Produto.objects.values(‘categoria’).annotate(Sum(‘valor’))
In [5]: print(orm.query)
SELECT
  `produtos_produto`.`categoria_id`,
  SUM(`produtos_produto`.`valor`) AS `valor__sum`
FROM `produtos_produto`
GROUP BY `produtos_produto`.`categoria_id` ORDER BY NULL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aggregate&quot;&gt;.aggregate()&lt;/h3&gt;
&lt;p&gt;Semelhante ao &lt;code class=&quot;highlighter-rouge&quot;&gt;.annotate()&lt;/code&gt; com a diferença de retornar um dicionário com valores agregados calculado sobre todo o queryset&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: from django.db.models import Avg, Max, Min
In [3]: Produto.objects.aggregate(
   ...: valor_maximo=Max('valor'),
   ...: valor_minimo=Min('valor'),
   ...: valor_medio=Avg('valor')
   ...: )
Out[3]:
{'valor_maximo': Decimal('100.00'),
 'valor_medio': 22.484,
 'valor_minimo': Decimal('2.00')}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visualizando SQL:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: orm = Produto.objects.aggregate(
 …: valor_maximo=Max(‘valor’),
 …: valor_minimo=Min(‘valor’),
 …: valor_medio=Avg(‘valor’)
 …: )
In [5]: print(orm.query)
 — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -
AttributeError Traceback (most recent call last)
&amp;lt;ipython-input-5–02ba74239328&amp;gt; in &amp;lt;module&amp;gt;()
 — → 1 print(orm.query)
AttributeError: ‘dict’ object has no attribute ‘query’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Caímos no erro novamente, o &lt;code class=&quot;highlighter-rouge&quot;&gt;.aggregate()&lt;/code&gt; não retona um queryset.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: orm = Produto.objects.values(‘categoria’).annotate(Sum(‘valor’))
In [5]: type(orm)
Out[5]: django.db.models.query.QuerySet
In [6]: orm = Produto.objects.aggregate(
 …: valor_maximo=Max(‘valor’),
 …: valor_minimo=Min(‘valor’),
 …: valor_medio=Avg(‘valor’)
 …: )
In [7]: type(orm)
Out[7]: dict
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assim como &lt;code class=&quot;highlighter-rouge&quot;&gt;.get()&lt;/code&gt; também conseguimos visualizar a query SQL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [4]: from django.db import connection
In [5]: connection.queries
Out[5]:
[{‘sql’: ‘SELECT
  MAX(`produtos_produto`.`valor`) AS `valor_maximo`,
  AVG(`produtos_produto`.`valor`) AS `valor_medio`,
  MIN(`produtos_produto`.`valor`) AS `valor_minimo`
FROM `produtos_produto`’,
 ‘time’: ‘0.000’}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;queryset-são-lazy&quot;&gt;QuerySet são Lazy&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Todos os métodos que retornam um QuerySet&lt;/strong&gt; são considerados lazy.&lt;/p&gt;

&lt;p&gt;Se eu tiver essas consultas abaixo, quantas consultas foram realizadas no banco de dados?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: produtos = Produto.objects.all()
In [3]: categoria_2 = produtos.filter(categoria=2)
In [4]: lista_produto = produtos.values_list(‘nome’, flat=True)
In [5]: print(lista_produto)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;APENAS UMA!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In [1]: from core.produtos.models import Produto
In [2]: from django.db import connection
In [3]: produtos = Produto.objects.all()
In [4]: categoria_2 = produtos.filter(categoria=2)
In [5]: lista_produto = produtos.values_list(‘nome’, flat=True)
In [6]: print(len(connection.queries))
0
In [7]: print(lista_produto)
&amp;lt;QuerySet [‘Produto 1 da Categoria 1’, ‘Produto 2 da Categoria 1’,
‘Produto 3 da Categoria 1’, ‘Produto 4 da Categoria 1’,
‘Produto 5 da Categoria 1’, ‘Produto 1 da Categoria 2’,
‘Produto 2 da Categoria 2’, ‘Produto 3 da Categoria 2’,
‘Produto 4 da Categoria 2’, ‘Produto 5 da Categoria 2’,
‘Produto 1 da Categoria 3’, ‘Produto 2 da Categoria 3’,
‘Produto 3 da Categoria 3’, ‘Produto 4 da Categoria 3’,
‘Produto 5 da Categoria 3’, ‘Produto 1 da Categoria 4’,
‘Produto 2 da Categoria 4’, ‘Produto 3 da Categoria 4’,
‘Produto 4 da Categoria 4’, ‘Produto 5 da Categoria 4’,
‘…(remaining elements truncated)…’]&amp;gt;
In [8]: print(len(connection.queries))
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Isso significa que as consulta são realizadas no banco de dados quando pedimos. Mas quando pedimos?&lt;/p&gt;

&lt;p&gt;Podemos pedir para serem executadas nas seguintes formas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quando solicitamos somente um resultado:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Produto.objects.all()[0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando fazemos um slicinf passando um “step”:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; Produtos.objects.all()[::2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando iteramos:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; categoria for categoria in Categoria.objects.all()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos o método len() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; len(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos um list() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; list(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos um bool() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; bool(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Quando chamamos o repr() :&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; repr(Produto.objects.all())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dicas&quot;&gt;DICAS&lt;/h2&gt;

&lt;h3 id=&quot;reset_queries&quot;&gt;reset_queries&lt;/h3&gt;
&lt;p&gt;Se precisar limpar a lista de query do connection, utilize:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.db import reset_queries
&amp;gt;&amp;gt; reset_queries()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;django-logging&quot;&gt;Django logging&lt;/h3&gt;
&lt;p&gt;Caso queira que a query sql apareça toda vez que seja executada uma consulta orm, adicione ao arquivo &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;...

LOGGING = {
    &amp;#39;version&amp;#39;: 1,
    &amp;#39;disable_existing_loggers&amp;#39;: False,
    &amp;#39;handlers&amp;#39;: {
        &amp;#39;console&amp;#39;: {
            &amp;#39;class&amp;#39;: &amp;#39;logging.StreamHandler&amp;#39;,
        },
    },
    &amp;#39;loggers&amp;#39;: {
        &amp;#39;django&amp;#39;: {
            &amp;#39;handlers&amp;#39;: [&amp;#39;console&amp;#39;],
            &amp;#39;level&amp;#39;: &amp;#39;DEBUG&amp;#39;,
        },
    },
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/beatrizuezu/deb68f559403ab9c0ad709c991d3e496.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Espero que tenha ajudado a entender um pouco sobre ORM Django :)&lt;/p&gt;

&lt;p&gt;Obrigada ❤&lt;/p&gt;

&lt;p&gt;esse post foi originalmente escrito no &lt;a href=&quot;https://medium.com/@beatrizuezu/visualizando-query-sql-a-partir-do-orm-django-5771370a9c55&quot;&gt;Medium&lt;/a&gt; no dia 07/08/2017&lt;/p&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="django" /><category term="orm" /><category term="sql" /><summary type="html">Falei sobre esse assunto na palestra que fiz na TDC 2017 (The Developer’s Conference) e vou mostrar como visualizar query SQL do ORM do Django.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/relacao-tabela-vs-classes.png" /></entry><entry><title type="html">PyLadies &amp;amp; Django Girls: do medo ao incentivo</title><link href="http://localhost:4000/pyladies-e-django-girls-do-medo-ao-incentivo/" rel="alternate" type="text/html" title="PyLadies &amp; Django Girls: do medo ao incentivo" /><published>2018-03-16T22:44:00-03:00</published><updated>2018-03-16T22:44:00-03:00</updated><id>http://localhost:4000/pyladies-e-django-girls-do-medo-ao-incentivo</id><content type="html" xml:base="http://localhost:4000/pyladies-e-django-girls-do-medo-ao-incentivo/">&lt;p&gt;Na época que fazia faculdade gostava de mexer com HTML e CSS até que eu cheguei a estagiar como Front-End. Chegou um momento do estágio que eu não me via naquilo e queria entrar na área de Banco de dados e Big Data. Como eu gostava de ler sobre o tema de Big Data ouvia falar sobre as linguagens Python e Java. Porém tinha dificuldade em programar e achava difícil, só queria entrar em Banco de Dados e Big Data porque não iria programar. (Sabe de nada, inocente).&lt;/p&gt;

&lt;p&gt;Foi aí que eu decidi a procurar vagas de Banco de Dados e até que comecei a trabalhar com desenvolvimento de software com a linguagem VB.net e SQL Server. Tive medo de ser demitida nos primeiros meses por não saber a programar, achava que precisava documentar tudo e fiquei surpresa por terem me colocado em um projeto em menos de 3 meses. Corri atrás de cursos de orientação a objetos para entender melhor o código.&lt;/p&gt;

&lt;p&gt;Consegui me formar na faculdade e uns meses depois comecei a estudar uma nova linguagem: Ruby On Rails. Ainda acho a linguagem bem legal, naquela época estava empolgada com o mundo novo, mesmo tendo estagiado como Front-end, eu estava aprendendo termos novos de Back-end e ferramentas novas!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grupo-estudo-ruby.png&quot; alt=&quot;Grupo de estudos de Ruby on Rails&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Grupo de estudos de Ruby on Rails&lt;/figcaption&gt;

&lt;p&gt;Comecei a procurar mais sobre a comunidade de Ruby. Acabei caindo num evento que seria no final do mês de novembro (de 2015), porém tinha que me inscrever e já estavam encerradas as inscrições :( . Fiquei chateada por não ter pesquisado antes e por não poder participar do evento. Continuei a pesquisar pela internet e por coincidência ia ter no mesmo dia o evento de Ruby um curso de Python! Fiz logo a minha inscrição para participar do curso básico de Python. E foi assim que eu conheci o PyLadies São Paulo ❤. Uhuuul, iria fazer um curso de Python, mais uma linguagem que eu iria conhecer. Estava empolgada para o dia, mesmo tendo que acordar cedo em um sábado de manhã e ficar o dia todo codando.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cat-typing.gif&quot; alt=&quot;gatinho codando&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No dia do curso entrei tímida na sala, sentei ao lado de uma moça e fiquei na minha. Durante o exercícios propostos, percebia que a moça tinha um pouco de dificuldade e como já tinha uma noção de programação por conta do trabalho, passei a ajudá-la com a sintaxe que eu também desconhecia. Ainda lembro do que eu senti quando comecei a reparar nas pessoas que estavam ao meu redor, nas pessoas que estavam participando do curso, nas que estavam ajudando na monitoria e nas que organizaram tudo aquilo. Senti uma sensação tão boa que eu queria também fazer parte daquilo e poder ajudar com o pouco do que eu sabia e fazer trabalho voluntário.&lt;/p&gt;

&lt;p&gt;No final do curso cheguei pra Pat e perguntei como fazia para ser monitora do próximo curso. A moça que eu ajudei ouviu o meu comentário e acabou por me elogiar. Coincidentemente ela conhecia a Alini que havia ministrado a aula.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/curso-iniciante-python.jpeg&quot; alt=&quot;Curso iniciante de Python pelo PyLadies São Paulo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Curso Iniciante de Python pelo PyLadies São Paulo&lt;/figcaption&gt;

&lt;p&gt;No primeiro curso do ano de 2016 fui umas das monitoras. Acabei conhecendo outras monitoras que também foram alunas. Nem parecia que era a primeira vez que nos encontrávamos, parecia que nos conhecíamos há muito tempo. Ser monitora me ensinou que &lt;strong&gt;o pouco que eu sei pode ser muito para quem não sabe&lt;/strong&gt; e de não ter vergonha de falar &lt;strong&gt;eu também não sei, vamos pesquisar?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/as-monitoras.jpeg&quot; alt=&quot;As monitoras - Alini, eu, Carol, Ariadyne, Élida, Pat&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;As monitoras (Alini, eu, Carol, Ariadyne, Élida, Pat)&lt;/figcaption&gt;

&lt;p&gt;Para o curso seguinte brinquei que poderia dar a aula, pois tinha gostado muito de ter sido monitora, e as meninas da organização levaram a sério, rs. Então elas me chamaram para dar o segundo curso de iniciante. Aceitei na hora! Foi a minha primeira experiência em lecionar para um monte de gente! É claro que fiquei nervosa e ansiosa no dia anterior, fiquei treinando os slides e pensando no modo que eu poderia explicar, com receio de falar algo errado ou das meninas não entenderem nada do que eu estava falando, ainda mais quando eu via que elas olhavam com uma cara de interrogação para a tela. Daí foi chegar junto e ver se a menina estava concentrada ou realmente com dúvida, nem sempre elas falam que não estão entendendo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/beatriz-ensinando.jpeg&quot; alt=&quot;Beatriz ensinando&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nunca pensei que pudesse ensinar tantas pessoas juntas dentro de um única sala de aula. No término da aula saí super feliz com a sensação de um dever cumprido e de quebrar uma barreira: falar em público.&lt;/p&gt;

&lt;p&gt;Fazer parte do PyLadies não é apenas aprender, ensinar e conversar sobre Python. É também conhecer outras meninas incríveis que se interessam em programação e poder falar sobre qualquer assunto! É uma irmandade ❤&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/amigas-meetup.jpeg&quot; alt=&quot;Amigas no meetup&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Eliete, Roberta, Carol, Duda, eu, Alini&lt;/figcaption&gt;

&lt;p&gt;Em umas das conversas com a Alini sobre frameworks, comentei que poderia ter um Django Girls em São Paulo e ela dizia: ‘Por que você não tenta organizar ? ‘, daí eu ficava pensativa por não conhecer o framework e nem saber mexer com Django. Eu estava tão envolvida com a comunidade Python que eu decidi sair da minha zona de conforto e comecei a procurar vagas de Python. Pouco tempo depois fui contratada para trabalhar com Django!&lt;/p&gt;

&lt;p&gt;Olhar para o ano de 2016 e perceber o que eu fiz na comunidade me permitiu muitas experiências novas: palestrei na TDC (The Developer Conference) e no RoadSec, fui para a Python Brasil em Florianópolis, participei do Django Girls Rio de Janeiro para trazer o Django Girls para São Paulo e conheci pessoas incríveis nesse tempo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/palestra-tdc.jpeg&quot; alt=&quot;Palestra na The Developer Conferece&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Palestra na The Developer Conferece
&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pyladies-roadsec.jpeg&quot; alt=&quot;PyLadies São Paulo, Campinas e São Carlos na RoadSec&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;PyLadies São Paulo, Campinas e São Carlos na RoadSec&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pyladies-sp-python-br.jpeg&quot; alt=&quot;PyLadies São Paulo na Python Brasil&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;PyLadies São Paulo na Python Brasil&lt;/figcaption&gt;

&lt;p&gt;Hoje sou uma das organizadoras do Django Girls São Paulo e a quantidade de inscrições que recebemos ( 369 inscrições!!) para o primeiro workshop não imaginava que o evento tomaria essa proporção. Não foi fácil selecionar as participantes, os treinadores e correr atrás de patrocínios. Não tenho palavras que descrevem o quão gratificante foi ver as meninas saindo com o sorriso no rosto, incentivadas a investir na área, comemorando a cada acerto e cada dificuldade superada. O primeiro Django Girls São Paulo me mostrou que eu sou capaz de ajudar e transformar a vida de outras pessoas com um simples ato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dg-1.jpeg&quot; alt=&quot;Primeiro Django Girls São Paulo&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;#1 Django Girls São Paulo ❤&lt;/figcaption&gt;

&lt;p&gt;Um pouco mais de um ano, fui de aluna para a co-organização do PyLadies São Paulo e Django Girls São Paulo, esse texto é para contar um pouco da minha trajetória na programação e na comunidade Python. Também é a forma que encontrei para agradecer à coordenação do PyLadies e do Django Girls por terem acreditado em mim e no meu trabalho dentro da comunidade, cada pessoa que pude ajudar, incentivar, que me ajudou a chegar até aqui e a você que leu esse texto.&lt;/p&gt;

&lt;p&gt;Obrigada ❤&lt;/p&gt;

&lt;p&gt;esse post foi originalmente escrito no &lt;a href=&quot;https://medium.com/@beatrizuezu/pyladies-django-girls-do-medo-ao-incentivo-e23c0f8bad38&quot;&gt;Medium&lt;/a&gt; no dia 28/03/2017&lt;/p&gt;</content><author><name>beatrizuezu</name></author><category term="blog" /><category term="pyladies" /><category term="django girls" /><category term="comunidade" /><category term="ensinar" /><category term="incentivar" /><summary type="html">Na época que fazia faculdade gostava de mexer com HTML e CSS até que eu cheguei a estagiar como Front-End. Chegou um momento do estágio que eu não me via naquilo e queria entrar na área de Banco de dados e Big Data. Como eu gostava de ler sobre o tema de Big Data ouvia falar sobre as linguagens Python e Java. Porém tinha dificuldade em programar e achava difícil, só queria entrar em Banco de Dados e Big Data porque não iria programar. (Sabe de nada, inocente).</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/dg-1.jpeg" /></entry></feed>